package com.westernarc.labyrithica;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class Labyrithica implements ApplicationListener {
	private OrthographicCamera camera;
	private SpriteBatch batch;
	
	private Sprite[] sprArrFloorTiles;
	
	//Dimensions of screen
	int SCREEN_WIDTH;
	int SCREEN_HEIGHT;
	
	//Width and height in number of tiles of each labyrinth floor
	final int CONST_LABYRINTH_WIDTH = 32;
	final int CONST_LABYRINTH_HEIGHT = 32;
	
	//Tiles sprite dimensions
	final int CONST_TILE_WIDTH = 32;
	final int CONST_TILE_HEIGHT = 32;
	
	//Current labyrinth floor
	int varCurrentLabyrinthFloor;
	
	//Labyrinth floor tiles.  2D Array that will store
	//which type of tile goes where on the map.
	enum FLOORTILE {Wall, Floor}
	FLOORTILE[][] varFloorTiles;
	
	//Player object
	Player player;
	
	@Override
	public void create() {		
		SCREEN_WIDTH = Gdx.graphics.getWidth();
		SCREEN_HEIGHT = Gdx.graphics.getHeight();
		
		camera = new OrthographicCamera(SCREEN_WIDTH, SCREEN_HEIGHT);
		batch = new SpriteBatch();
		
		sprArrFloorTiles = new Sprite[16];
		sprArrFloorTiles[0] = new Sprite(new Texture(Gdx.files.internal("img/wall.png")));
		sprArrFloorTiles[1] = new Sprite(new Texture(Gdx.files.internal("img/floor.png")));
		
		varFloorTiles = new FLOORTILE[CONST_LABYRINTH_WIDTH][CONST_LABYRINTH_HEIGHT];
		createNewFloor();
		
		player = new Player();
	}

	@Override
	public void dispose() {
		batch.dispose();
	}

	@Override
	public void render() {		
		Gdx.gl.glClearColor(1, 1, 1, 1);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		
		batch.setProjectionMatrix(camera.combined);
		batch.begin();

		handleInput();
		
		update();
		
		drawFloor();
		
		drawPlayer();
		
		batch.end();
	}

	//Draw floor tiles. Requires batch to be started
	private void drawFloor() {
		for(int i = 0; i < CONST_LABYRINTH_WIDTH; i++) {
			for(int ii = 0; ii < CONST_LABYRINTH_HEIGHT; ii++) {
				//Draw each tile according to the type of floortype they are
				switch(varFloorTiles[i][ii]){
				case Floor:
					sprArrFloorTiles[1].setPosition(i * CONST_TILE_WIDTH, ii * CONST_TILE_HEIGHT);
					sprArrFloorTiles[1].draw(batch);	
					break;
				case Wall:
					sprArrFloorTiles[0].setPosition(i * CONST_TILE_WIDTH, ii * CONST_TILE_HEIGHT);
					sprArrFloorTiles[0].draw(batch);
					break;
				default:
					break;
				
				}
			}
		}
	}
	
	private void drawPlayer() {
		//Player contains location in map coordinates.
		//Need to translate to screen coordinates.
		player.sprite.setPosition(player.x * CONST_TILE_WIDTH, player.y * CONST_TILE_HEIGHT);
		player.sprite.draw(batch);
	}
	//Reinitialize the floor array with a new floor
	private void createNewFloor() {
		for(int i = 0; i < CONST_LABYRINTH_WIDTH; i++) {
			for(int ii = 0; ii < CONST_LABYRINTH_HEIGHT; ii++) {
				if(Math.random() > 0.5) {
					varFloorTiles[i][ii] = FLOORTILE.Wall;
				} else {
					varFloorTiles[i][ii] = FLOORTILE.Floor;
				}
			}
		}
	}
	
	private void handleInput() {
		if(Gdx.input.isTouched()) {
			int x = Gdx.input.getX();
			int y = Gdx.input.getY();
			//Split the screen into 9 squares.
			//NW, N, NE, W, C, E, SW, S, SE
			//Split up like this:
			//1 2 3
			//4 5 6
			//7 8 9
			int pos = 0;
			if(y < SCREEN_HEIGHT / 3f && x < SCREEN_HEIGHT / 3f)
			
			if(y < SCREEN_HEIGHT/3f) player.moveTo(0, 0.7f);
			else if(y > SCREEN_HEIGHT * 2f / 3f) player.moveTo(0, -0.7f);
			if(x < SCREEN_WIDTH/3f) player.moveTo(-0.7f, 0);
			else if(x > SCREEN_WIDTH * 2f / 3f) player.moveTo(0.7f, 0);
		}
	}
	
	private void update() {
		//Update the player
		player.update();
		
		//Move the camera to be in position
		camera.position.set((int)player.sprite.getX(), (int)player.sprite.getY(), 0);
		camera.update(true);
		
		
	}
	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}
}
