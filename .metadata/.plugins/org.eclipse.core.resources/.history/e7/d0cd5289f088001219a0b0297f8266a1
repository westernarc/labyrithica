package com.westernarc.labyrithica;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class Labyrithica implements ApplicationListener {
	private OrthographicCamera camera;
	private SpriteBatch batch;
	
	private Sprite[] sprArrFloorTiles;
	
	//Dimensions of screen
	int SCREEN_WIDTH;
	int SCREEN_HEIGHT;
	
	//Width and height in number of tiles of each labyrinth floor
	final int CONST_LABYRINTH_WIDTH = 32;
	final int CONST_LABYRINTH_HEIGHT = 32;
	
	//Tiles sprite dimensions
	final int CONST_TILE_WIDTH = 32;
	final int CONST_TILE_HEIGHT = 32;
	
	//Current labyrinth floor
	int varCurrentLabyrinthFloor;
	
	//Labyrinth floor tiles.  2D Array that will store
	//which type of tile goes where on the map.
	enum FLOORTILE {Wall, Floor, Stairs}
	FLOORTILE[][] varFloorTiles;
	
	//Player object
	Player player;
	
	@Override
	public void create() {		
		SCREEN_WIDTH = Gdx.graphics.getWidth();
		SCREEN_HEIGHT = Gdx.graphics.getHeight();
		
		camera = new OrthographicCamera(SCREEN_WIDTH, SCREEN_HEIGHT);
		batch = new SpriteBatch();
		
		sprArrFloorTiles = new Sprite[16];
		sprArrFloorTiles[0] = new Sprite(new Texture(Gdx.files.internal("img/wall.png")));
		sprArrFloorTiles[1] = new Sprite(new Texture(Gdx.files.internal("img/floor.png")));
		sprArrFloorTiles[2] = new Sprite(new Texture(Gdx.files.internal("img/stairs.png")));
		
		varFloorTiles = new FLOORTILE[CONST_LABYRINTH_WIDTH][CONST_LABYRINTH_HEIGHT];
		createNewFloor();
		
		player = new Player();
	}

	@Override
	public void dispose() {
		batch.dispose();
	}

	@Override
	public void render() {		
		Gdx.gl.glClearColor(0.1f, 0.1f, 0.15f, 1);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		
		batch.setProjectionMatrix(camera.combined);
		batch.begin();

		handleInput();
		
		update();
		
		drawFloor();
		
		drawPlayer();
		
		batch.end();
	}

	//Draw floor tiles. Requires batch to be started
	private void drawFloor() {
		for(int x = 0; x < CONST_LABYRINTH_WIDTH; x++) {
			for(int y = 0; y < CONST_LABYRINTH_HEIGHT; y++) {
				//Draw each tile according to the type of floortype they are
				switch(varFloorTiles[x][y]){
				case Floor:
					sprArrFloorTiles[1].setPosition(x * CONST_TILE_WIDTH, y * CONST_TILE_HEIGHT);
					sprArrFloorTiles[1].draw(batch);	
					break;
				case Wall:
					sprArrFloorTiles[0].setPosition(x * CONST_TILE_WIDTH, y * CONST_TILE_HEIGHT);
					sprArrFloorTiles[0].draw(batch);
					break;
				case Stairs:
					sprArrFloorTiles[2].setPosition(x * CONST_TILE_WIDTH, y * CONST_TILE_HEIGHT);
					sprArrFloorTiles[2].draw(batch);
				default:
					break;
				}
			}
		}
	}
	
	private void drawPlayer() {
		//Player contains location in map coordinates.
		//Need to translate to screen coordinates.
		player.sprite.setPosition(player.x * CONST_TILE_WIDTH, player.y * CONST_TILE_HEIGHT);
		player.sprite.draw(batch);
	}
	
	//Reinitialize the floor array with a new floor
	private void createNewFloor() {
		for(int x = 0; x < CONST_LABYRINTH_WIDTH; x++) {
			for(int y = 0; y < CONST_LABYRINTH_HEIGHT; y++) {
				if(Math.random() > 0.8) {
					varFloorTiles[x][y] = FLOORTILE.Wall;
				} else {
					varFloorTiles[x][y] = FLOORTILE.Floor;
				}
			}
		}
		
		//Place stairs randomly
		varFloorTiles[(int)(Math.random() * CONST_LABYRINTH_HEIGHT)][(int)(Math.random() * CONST_LABYRINTH_HEIGHT)] = FLOORTILE.Stairs;
	}
	
	private void handleInput() {
		if(Gdx.input.isTouched()) {
			int x = Gdx.input.getX();
			int y = Gdx.input.getY();
			//Split the screen into 9 squares.
			//NW, N, NE, W, C, E, SW, S, SE
			//Split up like this:
			//1 2 3
			//4 5 6
			//7 8 9
			int pos = 0;
			//Top row
			if(y < SCREEN_HEIGHT / 3f) {
				if(x < SCREEN_WIDTH / 3f) pos = 1;
				else if(x > SCREEN_WIDTH * 2f / 3f) pos = 3;
				else pos = 2;
			}
			//Bottom row
			else if(y > SCREEN_HEIGHT * 2f / 3f){
				if(x < SCREEN_WIDTH / 3f) pos = 7;
				else if(x > SCREEN_WIDTH * 2f / 3f) pos = 9;
				else pos = 8;
			}
			//Middle row
			else {
				if(x < SCREEN_WIDTH / 3f) pos = 4;
				else if(x > SCREEN_WIDTH * 2f / 3f) pos = 6;
				else pos = 5;
			}
			System.out.println(pos);
			switch(pos) {
			case 1: //NW
				break;
			case 2: //N
				if(player.getCeilY() < CONST_LABYRINTH_HEIGHT - 1 && varFloorTiles[player.getFloorX()][player.getCeilY() + 1] != FLOORTILE.Wall)
				player.moveTo(0, 0.7f);
				break;
			case 3: //NE
				break;
			case 4: //W
				if(player.getFloorX() > 0 && varFloorTiles[player.getFloorX() - 1][player.getFloorY()] != FLOORTILE.Wall)
				player.moveTo(-0.7f, 0);
				break;
			case 5: //C
				break;
			case 6: //E
				if(player.getCeilX() < CONST_LABYRINTH_WIDTH - 1 && varFloorTiles[player.getCeilX() + 1][player.getFloorY()] != FLOORTILE.Wall)
				player.moveTo(0.7f, 0);
				break;
			case 7: //SW
				break;
			case 8: //S
				if(player.getFloorY() > 0 && varFloorTiles[player.getFloorX()][player.getFloorY() - 1] != FLOORTILE.Wall)
				player.moveTo(0, -0.7f);
				break;
			case 9: //SE
				break;
			default:
			}
		}
	}
	
	private void update() {
		//Update the player
		player.update();
		
		//Move the camera to be in position
		camera.position.set((int)player.sprite.getX(), (int)player.sprite.getY(), 0);
		camera.update(true);
		
	}
	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}
}
